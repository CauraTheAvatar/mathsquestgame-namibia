KEY NOTES FOR AUDIO OPTIMIZATION IN MY GAME DEVELOPMENT

1. Folder Structure for Audio Assets

/assets
   /audio
      /bgm            <-- Background Music (MP3/OGG)
         bgm_main.mp3
         level1.ogg
         boss_theme.mp3
      /sfx            <-- Sound Effects (WAV)
         button_click.wav
         enemy_hit.wav
         magic_cast.wav
      /voices         <-- Character Voice Clips (WAV/OGG)
         protagonist_attack.wav
         enemy_laugh.ogg


2. Loading and Managing Sounds in Javascript
Use the Howler.js library for efficient audio handling. Howler provides cross-browser support and better audio control.

Installing Howler.js

~CDN version
<script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>

~Via npm when using a module bundler
npm install howler


3. Implementing Audio in JavaScript

3.1  LOADING BGM

const bgm = new Howl({
    src: ['assets/audio/bgm/bgm_main.mp3'],  
    loop: true,  
    volume: 0.5  
});

// Play background music on page load
window.onload = function() {
    bgm.play();
};


3.2 LOADING SFX

const sfx = {
    buttonClick: new Howl({ src: ['assets/audio/sfx/button_click.wav'], volume: 0.8 }),
    enemyHit: new Howl({ src: ['assets/audio/sfx/enemy_hit.wav'], volume: 1.0 }),
    magicCast: new Howl({ src: ['assets/audio/sfx/magic_cast.wav'], volume: 0.9 }),
};

// Example: Play sound when button is clicked
document.querySelector("#startButton").addEventListener("click", () => {
    sfx.buttonClick.play();
});


3.3  PLAYING CHARACTER VOICE LINES

const voices = new Howl({
    src: ['assets/audio/voices/protagonist_attack.wav'],
    volume: 1.0
});

// Trigger voice when the character attacks
function attack() {
    voices.play();
}



4. Optimising Performance

4.1  PRELOAD ESSENTIAL SOUNDS ON GAME START TO AVOID LAG

bgm.load();
sfx.buttonClick.load();


4.2  STOP UNNECESSARY SOUNDS TO SAVE MEMORY

bgm.stop();  // Stops background music
sfx.enemyHit.stop();  // Stops a specific effect




